// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240730165915_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Server.Models.Categorie", b =>
                {
                    b.Property<string>("CodeCategorie")
                        .HasColumnType("TEXT");

                    b.Property<double>("Frais")
                        .HasColumnType("REAL");

                    b.Property<string>("Immatriculation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LibelleCategorie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbPlaceSupporte")
                        .HasColumnType("INTEGER");

                    b.HasKey("CodeCategorie");

                    b.HasIndex("Immatriculation");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Server.Models.Itineraire", b =>
                {
                    b.Property<string>("CodeItineraire")
                        .HasColumnType("TEXT");

                    b.Property<string>("HeureDepart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JourDepart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LieuArrivee")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LieuDepart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CodeItineraire");

                    b.ToTable("Itineraires");
                });

            modelBuilder.Entity("Server.Models.Train", b =>
                {
                    b.Property<string>("Immatriculation")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeItineraire")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Immatriculation");

                    b.HasIndex("CodeItineraire");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("Server.Models.Voyageur", b =>
                {
                    b.Property<int>("NumTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeCategorie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDepart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailVoyageur")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbPlace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomVoyageur")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NumTicket");

                    b.HasIndex("CodeCategorie");

                    b.ToTable("Voyageurs");
                });

            modelBuilder.Entity("Server.Models.Categorie", b =>
                {
                    b.HasOne("Server.Models.Train", null)
                        .WithMany()
                        .HasForeignKey("Immatriculation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Train", b =>
                {
                    b.HasOne("Server.Models.Itineraire", null)
                        .WithMany()
                        .HasForeignKey("CodeItineraire")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Voyageur", b =>
                {
                    b.HasOne("Server.Models.Categorie", null)
                        .WithMany()
                        .HasForeignKey("CodeCategorie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
